import logging
import os
import io
from collections import Counter, defaultdict

import requests
import sentry_sdk
import configparser
from gitlab import Gitlab
from gitlab.exceptions import GitlabGetError
from slugify import slugify
from main import Sentry, ensure_sentry_team, create_mr

GITLAB_URL = os.getenv("GITLAB_URL", "https://gitlab.numberly.in")
GITLAB_TOKEN = os.getenv("GITLAB_TOKEN")
SENTRY_URL = os.getenv("SENTRY_URL", "https://sentry.numberly.net")
SENTRY_TOKEN = os.getenv("SENTRY_TOKEN")

ISSUE_TITLE = '[Alerting Sentry]'
MR_TITLE = '[Alerting Sentry] Proposal'
ALERT_NEW_ISSUE = 'new_issue'
ALERT_INTERVAL  = 'issue_interval'

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(name)s %(levelname)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)


class Sentry:
    def __init__(self, url, *args, **kwargs):
        self.url = url
        self.token = kwargs["auth_token"]
        self.org_slug = kwargs["org_slug"]
        self.headers = {"Authorization": f"Bearer {self.token}"}

    def get_project(self, team, project_slug):
        r = requests.get(
            f"{self.url}/api/0/projects/{self.org_slug}/{project_slug}/",
            headers=self.headers,
        )
        if r.status_code != 200:
            return None
        return r.json()

    def get_project_rules(self, project, project_slug):
        sentry_project_id = project["id"]
        r = requests.get(
            f"{self.url}/api/0/organizations/{self.org_slug}/combined-rules/?project={project['id']}",
            headers=self.headers,
        )
        if r.status_code != 200:
            return None
        return r.json()

    def get_clients_keys(self, team, project):
        r = requests.get(
            f"{self.url}/api/0/projects/{self.org_slug}/{project}/keys/",
            headers=self.headers,
        )
        if r.status_code != 200:
            return None
        return r.json()



def get_sentryclirc(project):
    has_file, has_dsn = False, False
    alerts = dict()
    try:
        f = project.files.get(file_path=".sentryclirc", ref="master")
    except GitlabGetError:
        pass
    else:
        sentryclirc = configparser.ConfigParser()
        sentryclirc.sections()
        sentryclirc.read(f)
        has_file = True

        if 'DEFAULT' in sentryclirc:
            if sentryclirc['DEFAULT'].get('dsn', None):
                has_dsn = True
                if 'alert.' in sentryclirc:
                    for alert in sentryclirc.sections():
                        alerts['name'] = alert.split(".")[1]
                        alerts['notify'] = sentryclirc[alert].get('notify', '')
                        if alert == ALERT_INTERVAL:
                            alerts['seen'] = sentryclirc[alert].get('interval')
                            alerts['interval'] = sentryclirc[alert].get('interval')
        else:
            alerts = None

    return has_file, has_dsn, alerts, sentryclirc


def propose_sentry_mr(project, config):
    with io.StringIO() as ss:
            config.write(ss)
            ss.seek(0)
            content = f"## File generated by gitlab2sentry\n{ss.read()}"
    msg = (
        "@all Merge this and it will automatically create a default alert in Sentry "
        f"for {project.name_with_namespace}"
    )
    create_mr(
        project,
        "auto_add_sentry",
        ".sentryclirc",
        content,
        f"[gitlab2sentry] Merge me to add sentry alerting to {project.name} or close me",
        msg,
    )

def test_alert_config(alerts):
    for alert in alerts:
        if not alert['notify'] or not alert['name']:
            return 'Missing a required variable'
    return False


def add_new_issue(project, error):
    description = f"""The file .sentryclirc has been modified.
It contains a configuration to add alerts on Sentry.
This configuration could not be added because there is an error : 
{error}
Please, correct this error and close the issue to add this
configuration to sentry. 
"""
    project.issues.create(
        {
            "title": f"{ISSUE_TITLE} Syntax Error on .sentryclirc",
            "description": description
        }
    )

def main():
    # connect to gitlab & sentry
    gitlab = Gitlab(GITLAB_URL, private_token=GITLAB_TOKEN)
    gitlab.auth()
    sentry = Sentry(SENTRY_URL, auth_token=SENTRY_TOKEN, org_slug="numberly")

    # prepare our run variables
    mr_by_project = defaultdict(list)
    mr_counts = Counter()
    issue_by_project = defaultdict(list)
    issue_counts = Counter()
    run_stats = Counter()

    # get all the MRs we ever done
    for mr in gitlab.mergerequests.list(all=True, state="all", scope="created_by_me"):
        if "sentry" in mr.title.lower():
            mr_counts[mr.project_id] += 1
            mr_by_project[mr.project_id].append(mr)

    # get all the issues we ever opened
    for issue in gitlab.issues.list(state="opened"):
        if ISSUE_TITLE in issue.title.lower():
            issue_counts[issue.project_id] += 1
            issue_by_project[issue.project_id].append(issue)

    # loop for all team gitlab groups
    sentry_groups = set()
    groups = gitlab.groups.list(all=True, include_subgroups=True)
    for group in groups:
        # we are only interested in team groups
        if not group.full_name.startswith("team-"):
            continue
        sentry_group_name = group.full_name.split("/")[0].strip()

        # ensure each gitlab group has a sentry sibling
        logging.debug(f"handling gitlab group {group.full_name}")
        if sentry_group_name not in sentry_groups:
            ensure_sentry_team(sentry_group_name, sentry)
            sentry_groups.add(sentry_group_name)

        # check every project of the group
        for project in group.projects.list(all=True, archived=False):
            # skip project if MRs are disabled
            if not project.merge_requests_enabled:
                logging.info(
                    f"project {project.name_with_namespace} does not accept MRs"
                )
                run_stats["mr_disabled"] += 1
                continue

            # check sentryclirc presence and dsn in the file
            project = gitlab.projects.get(project.id)
            has_sentryclirc, has_dsn, alerts, sentryclirc = get_sentryclirc(project)
            logging.debug(
                f"project {project.name_with_namespace} "
                f"has_sentryclirc={has_sentryclirc} "
                f"has_dsn={has_dsn}"
                f"alerts={alerts.keys() if alerts else ''}"
            )

            # CASE 1 : no dsn and or no sentryclirc, nothing we can do here yet
            if not has_sentryclirc or not has_dsn:
                logging.info(
                    f"project {project.name_with_namespace} doesnt have a sentry project yet "
                )
                run_stats["alerting_disable"] += 1
                continue
            # CASE 2 : no alerting set
            elif has_sentryclirc and has_dsn and not alerts:
                logging.info(
                    f"project {project.name_with_namespace} : no alerting config detected"
                )
                for mr in mr_by_project[project.id]:
                    if mr.state == "opened":
                        logging.info(
                            f"project {project.name_with_namespace} has a "
                            f"pending {MR_TITLE} MR"
                        )
                        run_stats["mr_waiting"] += 1
                        break
                    elif mr.state == "closed":
                        logging.info(
                            f"project {project.name_with_namespace} declined "
                            f"our {MR_TITLE} MR"
                        )
                        run_stats["mr_closed"] += 1
                        break
                for issue in issue_by_project[project.id]:
                    if issue.state == "opened":
                        logging.info(
                            f"project {project.name_with_namespace} has an "
                            f"open issue {ISSUE_TITLE}"
                        )
                        run_stats["issue_waiting"] += 1
                        break
                else:
                    logging.info(
                        f"project {project.name_with_namespace} needs alerting "
                        f"{MR_TITLE} MR"
                    )
                    run_stats["mr_created"] += 1
                    try:
                        propose_sentry_mr(project, sentryclirc)
                    except Exception as err:
                        logging.warning(
                            f"project {project.name_with_namespace} failed to "
                            f"create the MR ({err})"
                        )
            # CASE 4 : alerts config detected
            elif has_sentryclirc and has_dsn and alerts:
                logging.info(
                    f"project {project.name_with_namespace} : alerting config detected"
                )
                failed = test_alert_config(alerts)
                if not failed:
                    sentry_project_name = "-".join(
                        project.path_with_namespace.split("/")[1:]
                    )
                    try:
                        sentry_project = sentry.get_project(
                            sentry_group_name,
                            sentry_project_name,
                        )
                        sentry_project_rules = sentry.get_project_rules(
                            sentry_project,
                            sentry_project_name,
                        )
                    except Exception as err:
                        logging.warning(
                            f"project {project.name_with_namespace} failed to "
                            f"get its sentry project ({err})"
                        )
                        continue
                    
                    if sentry_project_rules:
                        project = gitlab.projects.get(project.id)
                        sentryclirc = project.files.get(file_path=".sentryclirc", ref="master")
                        commit = project.commits.get(sentryclirc.last_commit_id)
                        # commit.committed_date
                        if len(sentry_project_rules) != len(alerts):
                            logging.info(
                                f"project {project.name_with_namespace} : alerts in .sentryclirc "
                                "and Sentry are different"
                            )
                            # remove all sentry rule
                            # add all rule from file to sentry
                        else:
                            pass
                    # Sync alerts
                    pass
                else:
                    logging.info(
                        f"project {project.name_with_namespace} : bad syntax"
                    )
                    add_new_issue(
                        gitlab.projects.get(project.id),
                        failed
                    )



                pass

    logging.info(f"run stats: {dict(run_stats)}")


if __name__ == "__main__":
    main()
