import logging
import os
from collections import Counter, defaultdict

import requests
from gitlab import Gitlab
from slugify import slugify

GITLAB_URL = os.getenv("GITLAB_URL", "https://gitlab.numberly.in")
GITLAB_TOKEN = os.getenv("GITLAB_TOKEN")
SENTRY_URL = os.getenv("SENTRY_URL", "https://sentry.numberly.net")
SENTRY_TOKEN = os.getenv("SENTRY_TOKEN")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(name)s %(levelname)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)


class Sentry:
    def __init__(self, url, *args, **kwargs):
        self.url = url
        self.token = kwargs["auth_token"]
        self.org_slug = kwargs["org_slug"]
        self.headers = {"Authorization": f"Bearer {self.token}"}

    def create_or_get_team(self, team):
        team_slug = slugify(team)
        data = {
            "name": team,
            "slug": team_slug,
        }
        r = requests.post(
            f"{self.url}/api/0/organizations/{self.org_slug}/teams/",
            headers=self.headers,
            data=data,
        )
        result = r.json()
        if r.status_code != 201:
            if r.status_code == 409:
                r = requests.get(
                    f"{self.url}/api/0/teams/{self.org_slug}/{team_slug}/",
                    headers=self.headers,
                )
                return r.json()
            return None

        logging.info(f"team {team} created!")
        return result

    def get_project(self, team, project_slug):
        r = requests.get(
            f"{self.url}/api/0/projects/{self.org_slug}/{project_slug}/",
            headers=self.headers,
        )
        if r.status_code != 200:
            return None
        return r.json()

    def create_or_get_project(self, team, project):
        project_slug = slugify(project)
        data = {
            "name": project,
            "slug": project_slug,
        }
        r = requests.post(
            f"{self.url}/api/0/teams/{self.org_slug}/{team}/projects/",
            headers=self.headers,
            data=data,
        )
        result = r.json()
        if r.status_code != 201:
            if r.status_code == 409:
                return self.get_project(team, project_slug)
            return None

        return result

    def get_clients_keys(self, team, project):
        r = requests.get(
            f"{self.url}/api/0/projects/{self.org_slug}/{project}/keys/",
            headers=self.headers,
        )
        if r.status_code != 200:
            return None
        return r.json()


def create_mr(project, branch_name, file_path, content, title, description):
    try:
        project.branches.get(branch_name)
        logging.info("branch already exists, deleting")
        project.branches.delete(branch_name)
    except Exception:
        pass

    project.branches.create({"branch": branch_name, "ref": "master"})
    try:
        f = project.files.get(file_path=file_path, ref="master")
        f.content = content
        f.save(branch=branch_name, commit_message="Udpate .sentryclirc")
    except Exception:
        f = project.files.create(
            {
                "file_path": file_path,
                "branch": branch_name,
                "content": f"{content}",
                "author_email": "gitlab2sentry@numberly.com",
                "author_name": "gitlab2sentry",
                "commit_message": "Update .sentryclirc",
            }
        )
    project.mergerequests.create(
        {
            "source_branch": branch_name,
            "target_branch": "master",
            "title": title,
            "description": description,
        }
    )


def ensure_sentry_team(team_name, sentry):
    logging.info(f"ensuring team {team_name} exists on sentry")
    sentry.create_or_get_team(team_name)


def propose_sentry_mr(project):
    content = """## File generated by gitlab2sentry
[defaults]
url = https://sentry.numberly.net/
"""
    msg = (
        "@all Merge this and it will automatically create a Sentry project "
        f"for {project.name_with_namespace} :cookie:"
    )
    create_mr(
        project,
        "auto_add_sentry",
        ".sentryclirc",
        content,
        f"[gitlab2sentry] Merge me to add sentry to {project.name} or close me",
        msg,
    )


def add_sentry_dsn_mr(project, dsn):
    content = f"""## File generated by gitlab2sentry
[defaults]
url = https://sentry.numberly.net/
dsn = {dsn}
"""
    msg = (
        "@all Congrats, your Sentry project has been created, merge this "
        "to finalize your Sentry integration :clap: :cookie:"
    )
    create_mr(
        project,
        "auto_add_sentry_dsn",
        ".sentryclirc",
        content,
        f"[gitlab2sentry] Merge me to add your sentry DSN to {project.name}",
        msg,
    )


def main():
    # connect to gitlab & sentry
    gitlab = Gitlab(GITLAB_URL, private_token=GITLAB_TOKEN)
    gitlab.auth()
    sentry = Sentry(SENTRY_URL, auth_token=SENTRY_TOKEN, org_slug="numberly")

    # prepare our run variables
    mr_by_project = defaultdict(list)
    mr_counts = Counter()
    mr_stats = Counter()

    # get all the MRs we ever done
    for mr in gitlab.mergerequests.list(all=True, state="all", scope="created_by_me"):
        if "sentry" in mr.title.lower():
            mr_counts[mr.project_id] += 1
            mr_by_project[mr.project_id].append(mr)

    # loop for all team gitlab groups
    groups = gitlab.groups.list(search="team-")
    for group in groups:
        # ensure each gitlab group has a sentry sibling
        logging.debug(f"handling gitlab group {group.full_name}")
        ensure_sentry_team(group.full_name, sentry)

        # check every project of the group
        for project in group.projects.list(all=True):
            mr_count = mr_counts[project.id]
            if mr_count == 0:
                # no mr ever? let's propose sentry!
                logging.info(
                    f"project {project.name_with_namespace} needs sentry "
                    ".sentryclirc MR"
                )
                mr_stats["mr_proposal"] += 1
                # TODO: uncomment me
                # propose_sentry_mr(project)
            elif mr_count == 1:
                # one mr already open?
                mr_merged = mr_by_project[project.id][0].state == "merged"
                if mr_merged:
                    # it's been merged!
                    # let's make sure the sentry project exists
                    # and open a MR with the project DSN
                    logging.info(
                        f"creating sentry project {project.name_with_namespace}"
                    )
                    # TODO: uncomment me
                    # sentry_project = sentry.create_or_get_project(
                    #    group.full_name,
                    #    project.name,
                    # )
                    # clients_keys = sentry.get_clients_keys(
                    #    group.full_name, sentry_project["slug"]
                    # )
                    # dsn = clients_keys[0]["dsn"]["public"]
                    # logging.info(
                    #    f"project {project.name_with_namespace} sentry dsn: {dsn}"
                    # )
                    logging.info(
                        f"project {project.name_with_namespace} needs sentry dsn MR"
                    )
                    # TODO: uncomment me
                    # add_sentry_dsn_mr(project, dsn)
                    mr_stats["mr_dsn"] += 1
                    continue
                logging.info(
                    f"project {project.name_with_namespace} is pending MR action"
                )
                mr_stats["mr_waiting"] += 1
            elif mr_count > 1:
                # we opened multiple sentry MRs already, skip it
                logging.info(
                    f"project {project.name_with_namespace} has been handled, skipping"
                )
                mr_stats["mr_done"] += 1
    logging.info(f"run stats: {dict(mr_stats)}")


if __name__ == "__main__":
    main()
